from __future__ import annotations

import typing as t

from ..clients.client import Client

__all__ = ('BaseState', 'BaseSubState')

KConvertibleT = t.TypeVar('KConvertibleT')
KT = t.TypeVar('KT')
VT = t.TypeVar('VT')
DT = t.TypeVar('DT')


class _StateCommon(t.Generic[KConvertibleT, KT, VT]):
    def first(self, func: t.Callable[[VT], bool] | None = ...
              ) -> VT | None: ...


class BaseState(_StateCommon[KConvertibleT, KT, VT]):
    __key_transformer__: t.ClassVar[t.Callable[[KConvertibleT], KT]]
    __mapping__: t.ClassVar[type[t.MutableMapping[KT, VT]]] = dict

    client: Client
    mapping: __mapping__

    def __init__(self, *, client: Client) -> None: ...

    def transform_key(self, key: KConvertibleT) -> KT: ...

    def __len__(self) -> int: ...

    def __iter__(self) -> t.Iterator[VT]: ...

    def __reversed__(self) -> t.Iterator[VT]: ...

    def __contains__(self, key: KConvertibleT) -> bool: ...

    def __getitem__(self, key: KConvertibleT) -> VT: ...

    def __setitem__(self, key: KConvertibleT, value: VT) -> None: ...

    def __delitem__(self, key: KConvertibleT) -> None: ...

    def keys(self) -> t.Iterable[KT]: ...

    def values(self) -> t.Iterable[VT]: ...

    def items(self) -> t.Iterable[tuple[KT, VT]]: ...

    @t.overload
    def get(self, key: KConvertibleT) -> VT | None: ...

    @t.overload
    def get(self, key: KConvertibleT, default: DT) -> VT | DT: ...

    @t.overload
    def pop(self, key: KConvertibleT) -> VT: ...

    @t.overload
    def pop(self, key: KConvertibleT, default: DT) -> VT | DT: ...

    def clear(self) -> None: ...

    def upsert(self, *args: t.Any, **kwargs: t.Any) -> VT: ...

    def upsert_many(self, values: t.Iterable[t.Any], *args: t.Any,
                    **kwargs: t.Any) -> set[VT]: ...

    def upsert_replace(self, *args: t.Any, **kwargs: t.Any) -> set[VT]: ...


class BaseSubState(_StateCommon[KConvertibleT, KT, VT]):
    superstate: BaseState[KConvertibleT, KT, VT]

    def __init__(self, *, superstate: BaseState[KConvertibleT, KT, VT]
                 ) -> None: ...

    def __len__(self) -> int: ...

    def __iter__(self) -> t.Iterator[VT]: ...

    def __reversed__(self) -> t.Iterator[VT]: ...

    def __contains__(self, key: KConvertibleT) -> bool: ...

    def __getitem__(self, key: KConvertibleT) -> VT: ...

    def set_keys(self, keys: t.Iterable[KConvertibleT]) -> None: ...

    def add_key(self, key: KConvertibleT) -> None: ...

    def extend_keys(self, keys: t.Iterable[KConvertibleT]) -> None: ...

    def keys(self) -> t.Iterable[KT]: ...

    def values(self) -> t.Iterable[VT]: ...

    def items(self) -> t.Iterable[tuple[KT, VT]]: ...

    @t.overload
    def get(self, key: KConvertibleT) -> VT | None: ...

    @t.overload
    def get(self, key: KConvertibleT, default: DT) -> VT | DT: ...
